---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    ksonnet.io/component: service
  name: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dkube
  namespace: dkube
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dkubeClusterRole
subjects:
- kind: ServiceAccount
  name: dkube
  namespace: dkube
---
apiVersion: v1
data:
  config.yaml: |
    issuer: http://localhost:5556/dex
    storage:
      type: kubernetes
      config:
        inCluster: true
    frontend:
      logoURL: "/dex"
      extra:
        dkubeUrl: "/dex/theme/logo.png"
        favUrl: "/dex/theme/favicon.png"
        mainCss: "/dex/static/main.css"
        styleCss: "/dex/theme/styles.css"
    web:
      http: 0.0.0.0:5556
    telemetry:
      http: 0.0.0.0:5558
    expiry:
      idTokens: "72h"
    staticClients:
    - id: dkube
      redirectURIs:
      - '/callback'
      name: 'Dkube App'
      secret: dkube-secret
    oauth2:
      skipApprovalScreen: true
    enablePasswordDB: true
    staticPasswords:
    - email: L-UNAME
      hash: L-PASSWD
      username: L-UNAME
      userID: L-UNAME

kind: ConfigMap
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-auth-config
  namespace: dkube
---
apiVersion: v1
data:
  fluent.conf: |
    <source>
     @type tail
     path /var/log/containers/*.log
     pos_file /var/log/fluentd-containers-jobs.log.pos
     time_key time
     time_format %Y-%m-%dT%H:%M:%S
     refresh_interval 1s
     open_on_every_update true
     enable_stat_watcher false
     rotate_wait 2
     tag kubernetes_jobs.*
     format json
     read_from_head true
    </source>

    <filter kubernetes_jobs.**>
       @type kubernetes_metadata
    </filter>

    #collecting logs... pod which has labels like logger: dkube (or) logger:dkubepl
    <filter kubernetes_jobs.**>
       @type grep
       <regexp>
          key $.kubernetes.labels.logger
          pattern /^dkube/
       </regexp>
    </filter>

    <filter kubernetes_jobs.**>
        @type record_modifier
        enable_ruby
        <record>
          plpath pllauncher
          training_path jobs
          #check for training job or pipeline  launcher 
          jobuuid ${record.dig("kubernetes", "labels", "jobuuid") ? record.dig("kubernetes", "labels", "jobuuid") : record.dig("kubernetes", "labels", "runid") }
          #check for trail job
          studyuuid ${record.dig("kubernetes", "labels", "studyuuid")}

          finalid ${record.dig("studyuuid") ? record.dig("studyuuid") : record.dig("jobuuid") }

          #pipeline logs are stroing inside logs/pllauncher and training job logs are stroing inside logs/jobs
          fpath ${record.dig("kubernetes", "labels", "runid")? record.dig("plpath") : record.dig("training_path")}

          username ${record.dig("kubernetes", "labels", "username") ? record.dig("kubernetes", "labels", "username") : record.dig("kubernetes", "labels", "workflows_argoproj_io/workflow") }

          container ${record.dig("kubernetes", "container_name")}

          #td-replica-type and tf-replica-index are useful in Distributed job
          temp_log ${record.dig("kubernetes", "labels", "tf-replica-type")}-${record.dig("kubernetes", "labels", "tf-replica-index")}:  ${record.dig("log")}
        
          #check for datajob log or training job log
          training_log ${record.dig("kubernetes", "labels", "tf-replica-type") ? record.dig("temp_log") : record.dig("log")}


          #for trail jobs logs appending trailjobname to logs
          trial_log ${record.dig("kubernetes", "labels", "jobname")}:  ${record.dig("training_log")}

          #pod which has studyuuid label considering as trail job
          final_log ${record.dig("kubernetes", "labels", "studyuuid") ? record.dig("trial_log") : record.dig("training_log")} 

          #for pipeline launcher logs we are not adding extra fields 
          message ${record.dig("kubernetes", "labels", "runid") ? record.dig("log") : record.dig("final_log") } 
        </record>
        #removing unwanted and temp fields
        remove_keys log, stream, docker, kubernetes, final_log, trial_log, training_log, jobuuid, studyuuid, plpath, training_path, temp_log
    </filter>

    <match kubernetes_jobs.**>
       @type s3
       aws_key_id dkube
       aws_sec_key l06dands19s
       s3_endpoint http://dkube-minio-server.dkube:9000/
       s3_bucket dkube
       path system/logs/${fpath}/${username}/${finalid}/${container}
       s3_object_key_format %{path}/job-log-%{index}.%{file_extension}
       store_as text
       force_path_style true
       <format>
         @type single_value
         message_key message
         add_newline false
       </format>
       <buffer username, finalid, container, fpath>
         @type file
         path /var/log/td-agent/jobs/${fpath}/${username}/${finalid}/${container}
         timekey 10s           
         timekey_wait 10s  
         timekey_use_utc true  
         chunk_limit_size 256m
         flush_thread_count 8
         retry_forever true
         overflow_action throw_exception
         retry_type exponential_backoff
         retry_exponential_backoff_base 2
         flush_mode immediate
         flush_at_shutdown true
         queue_limit_length 10000
       </buffer>
    </match>
kind: ConfigMap
metadata:
  name: dkube-log-collector
  namespace: dkube
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dkube-metric-collector
  namespace: dkube
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers-metric.log.pos
      time_format %Y-%m-%dT%H:%M:%S
      tag kubernetes_metric.*
      refresh_interval 1s
      open_on_every_update true
      enable_stat_watcher false
      rotate_wait 2
      format json
      read_from_head true
    </source>

    <filter kubernetes_metric.**>
      @type kubernetes_metadata
    </filter>

    <filter kubernetes_metric.**>
        @type grep
        <regexp>
          key $.kubernetes.labels.logger
          pattern /^dkube$/
        </regexp>
    </filter>

    <filter kubernetes_step.**>
        @type grep
        <regexp>
            key log
            pattern /\[dkube\]\[metrics\]/
        </regexp>
    </filter>

    <filter kubernetes_metric.**>
      @type grep
      <regexp>
        key $.log
        pattern /(.*) = (.*),/
      </regexp>
    </filter>

    <filter kubernetes_metric.**>
      @type parser
      key_name $.log
      reserve_data true
      remove_key_name_field true
      suppress_parse_error_log true
      <parse>
        @type regexp
        expression /^(.*):(.*):((.*)])?((.*):)?(?<message>(.*))$/
      </parse>
    </filter>

    <filter kubernetes_metric.**>
      @type record_modifier
      enable_ruby
      <record>
        escaped_tag ${record["message"].gsub(' ', '')}
      </record>
    </filter>

    <filter kubernetes_metric.**>
      @type parser
      key_name $.escaped_tag
      reserve_data true
      remove_key_name_field true
      suppress_parse_error_log true
      <parse>
        @type ltsv
        delimiter_pattern /,/
        label_delimiter  =
      </parse>
    </filter>

    <filter kubernetes_metric.**>
      @type record_modifier
      enable_ruby
      <record>
        jobname ${record.dig("kubernetes", "labels", "jobname")}
        username ${record.dig("kubernetes", "labels", "username")}
        jobid ${record.dig("kubernetes", "labels", "jobid")}
      </record>
      remove_keys log, stream, docker, kubernetes, escaped_tag, message
    </filter>

    <match kubernetes_metric.**>
      @type copy
      <store>
        @type http
        endpoint http://dkube-metrics-pushgateway.dkube:9401/export-training-info
        open_timeout 10
        <format>
          @type json
        </format>
        <buffer>
          @type file
          path /var/log/td-agent/jobs/metrics
          flush_mode interval
          flush_interval 15s
          flush_thread_count 8
          retry_forever true
          overflow_action throw_exception
          retry_type exponential_backoff
          flush_at_shutdown true
          queue_limit_length 10000
        </buffer>
      </store>
      <store>
        @type stdout
      </store>
    </match>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-db-pvc
  namespace: dkube
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: ""
  volumeName: dkube-db-pv
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube
  namespace: dkube
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dkube-proxy
subjects:
- kind: ServiceAccount
  name: dkube-proxy
  namespace: dkube
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: d3auth
    ksonnet.io/component: service
  name: dkube-auth-server
  namespace: dkube
spec:
  ports:
  - name: dex-s
    port: 5556
    protocol: TCP
    targetPort: 5556
  - name: authn
    port: 3001
    protocol: TCP
    targetPort: 3001
  selector:
    app: dkube-auth
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-controller-master
    ksonnet.io/component: service
  name: dkube-controller-headless-master
  namespace: dkube
spec:
  clusterIP: None
  ports:
  - name: dkube-d3api
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-controller-master
    ksonnet.io/component: service
  name: dkube-controller-master
  namespace: dkube
spec:
  ports:
  - name: dkube-d3api
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-controller-worker
    ksonnet.io/component: service
  name: dkube-controller-worker
  namespace: dkube
spec:
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-worker
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-db-server
  namespace: dkube
spec:
  ports:
  - port: 2379
    protocol: TCP
    targetPort: 2379
  selector:
    app: dkube-db-server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-docs
  namespace: dkube
spec:
  ports:
  - name: serve
    port: 8888
    protocol: TCP
    targetPort: 80
  selector:
    app: dkube-tools
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-downloader
  namespace: dkube
spec:
  ports:
  - port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-controller-worker
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9401"
    prometheus.io/dkube_scrape: "true"
  labels:
    app: dkube-gpu-exporter
    ksonnet.io/component: service
  name: dkube-exporter
  namespace: dkube
spec:
  ports:
  - name: http-metrics
    port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-ext
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-operator-api-proxy
  namespace: dkube
spec:
  ports:
  - name: dfabproxy
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: dkube-operator-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/dkube_scrape: "true"
    prometheus.io/port: "9401"
  labels:
    app: dkube-pushgateway
  name: dkube-metrics-pushgateway
  namespace: dkube
spec:
  ports:
  - name: http-metrics
    port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-pushgateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-prometheus-grafana
    ksonnet.io/component: service
  name: dkube-prometheus-grafana-proxy
  namespace: dkube
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: dkube-prometheus-grafana
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-serving
  namespace: dkube
spec:
  ports:
  - name: serve
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: dkube-tools
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9401"
    prometheus.io/dkube_scrape: "true"
  labels:
    app: dkube-storage-exporter
    ksonnet.io/component: service
  name: dkube-storage-exporter
  namespace: dkube
spec:
  ports:
  - name: http-metrics
    port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-storage-exporter
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    ksonnet.io/component: service
    service: dkube-ui
  name: dkube-ui
  namespace: dkube
spec:
  ports:
  - name: ui
    port: 3000
    targetPort: 3000
  selector:
    app: dkube-ui
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: dkube-authn
  namespace: dkube
spec:
  filters:
  - filterConfig:
      httpService:
        authorizationRequest:
          allowedHeaders:
            patterns:
            - exact: cookie
            - exact: mode
            - exact: d3-license
            - exact: d3-uname
            - exact: d3-role
        authorizationResponse:
          allowedUpstreamHeaders:
            patterns:
            - exact: kubeflow-userid
            - exact: mode
            - exact: d3-license
            - exact: d3-uname
            - exact: d3-role
        serverUri:
          cluster: outbound|3001||dkube-auth-server.dkube.svc.cluster.local
          failureModeAllow: false
          timeout: 10s
          uri: http://dkube-auth-server.dkube.svc.cluster.local
      statusOnError:
        code: GatewayTimeout
    filterName: envoy.ext_authz
    filterType: HTTP
    insertPosition:
      index: FIRST
    listenerMatch:
      listenerType: GATEWAY
  workloadLabels:
    dkube: ingressgateway
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-proxy
  namespace: dkube
  labels:
    dkube: ingressgateway
spec:
  type: LoadBalancer
  selector:
    dkube: ingressgateway
  ports:
    -
      name: https
      nodePort: 32222
      port: 443
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: dkube-istio-gateway
  namespace: dkube
spec:
  selector:
    dkube: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
      privateKey: /etc/istio/ingressgateway-certs/tls.key
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-auth-server
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dex
    route:
    - destination:
        port:
          number: 5556
        host: dkube-auth-server
  - match:
    - uri:
        prefix: /dkube/v2/login
    rewrite:
        uri: /login
    route:
    - destination:
        port:
          number: 3001
        host: dkube-auth-server
  - match:
    - uri:
        prefix: /dkube/v2/logout
    rewrite:
        uri: /logout
    route:
    - destination:
        port:
          number: 3001
        host: dkube-auth-server
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-db-server
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/v2/etcd/
    rewrite:
        uri: /
    route:
    - destination:
        port:
          number: 2379
        host: dkube-db-server
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-docs
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /docs
    rewrite:
        uri: /docs
    route:
    - destination:
        port:
          number: 8888
        host: dkube-docs
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-downloader
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/v2/ext
    rewrite:
        uri: /dkube/v2
    route:
    - destination:
        port:
          number: 9401
        host: dkube-downloader
  - match:
    - uri:
        prefix: /dkube/pipeline/logs/
    rewrite:
        uri: /dkube/v2/kubeflow/
    route:
    - destination:
        port:
          number: 9401
        host: dkube-downloader
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-operator-api-proxy
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/v2/operator
    route:
    - destination:
        port:
          number: 8000
        host: dkube-operator-api-proxy
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-prometheus-grafana
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/grafana/
    rewrite:
        uri: /
    route:
    - destination:
        port:
          number: 80
        host: dkube-grafana
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-prometheus
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/v2/prometheus/api/v1
    rewrite:
        uri: /api/v1
    route:
    - destination:
        port:
          number: 9090
        host: dkube-prometheus.dkube.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-serving
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /inference
    route:
    - destination:
        port:
          number: 8000
        host: dkube-serving
  - match:
    - uri:
        prefix: /predict
    route:
    - destination:
        port:
          number: 8000
        host: dkube-serving
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-ui
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        port:
          number: 3000
        host: dkube-ui
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kf-argo-ui
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /argo/logs/
    rewrite:
        uri: /api/logs/
    route:
    - destination:
        port:
          number: 80
        host: argo-ui.kubeflow.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kf-katib
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /katib
    route:
    - destination:
        port:
          number: 80
        host: katib-ui.kubeflow.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kf-pipeline-ui
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /pipeline
    route:
    - destination:
        port:
          number: 80
        host: ml-pipeline-ui.kubeflow.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-installer
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /installer
    rewrite:
        uri: /ui
    route:
    - destination:
        port:
          number: 8888
        host: dkube-installer-service
  - match:
    - uri:
        prefix: /report
    route:
    - destination:
        port:
          number: 8888
        host: dkube-installer-service
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dkube-controller
  namespace: dkube
spec:
  hosts:
  - "*"
  gateways:
  - dkube-istio-gateway
  http:
  - match:
    - uri:
        prefix: /dkube/v2/controller
      method:
        exact: GET
    route:
    - destination:
        port:
          number: 5000
        host: dkube-controller-worker
  - match:
    - uri:
        prefix: /dkube/v2/controller
    route:
    - destination:
        port:
          number: 5000
        host: dkube-controller-master
---
apiVersion: v1
kind: Service
metadata:
  name: dkube-minio-server
  namespace: dkube
spec:
  externalName: dkube-minio-server.dkube-infra.svc.cluster.local
  type: ExternalName
